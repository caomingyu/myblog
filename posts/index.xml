<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CaoMyの博客</title>
    <link>http://www.cmyblog.top/posts/</link>
    <description>Recent content in Posts on CaoMyの博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 31 Jul 2019 17:51:19 +0800</lastBuildDate>
    
	<atom:link href="http://www.cmyblog.top/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Linux系统上，怎么书写jar的启停脚本</title>
      <link>http://www.cmyblog.top/posts/linux%E4%B8%8B%E4%B9%A6%E5%86%99%E5%9F%BA%E4%BA%8Ejar%E7%9A%84%E5%90%AF%E5%81%9C%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Wed, 31 Jul 2019 17:51:19 +0800</pubDate>
      
      <guid>http://www.cmyblog.top/posts/linux%E4%B8%8B%E4%B9%A6%E5%86%99%E5%9F%BA%E4%BA%8Ejar%E7%9A%84%E5%90%AF%E5%81%9C%E8%84%9A%E6%9C%AC/</guid>
      <description>在Linux系统上，怎么书写jar的启停脚本
 启动脚本参考  #!/bin/sh pidfile=tpid if [ -f &amp;quot;$pidfile&amp;quot; ] &amp;amp;&amp;amp; kill -0 $( cat &amp;quot;$pidfile&amp;quot; ); then echo &amp;quot;jar 已经在运行中...&amp;quot; exit 1 fi nohup java -jar &amp;lt;jar包名&amp;gt; --spring.config.location=/home/cmy/test/ --logging.config=logback-spring.xml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&amp;amp; echo $! &amp;gt; tpid echo &amp;quot;jar启动成功&amp;quot;   停止脚本参考  #!/bin/sh pidfile=tpid if [ ! -f &amp;quot;$pidfile&amp;quot; ] || ! kill -0 $( cat &amp;quot;$pidfile&amp;quot; ); then echo &amp;quot;jar没有在运行&amp;quot; else echo &amp;quot;正在停止jar...&amp;quot; PID=$(cat &amp;quot;$pidfile&amp;quot;) kill -9 $PID rm &amp;quot;$pidfile&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;jar已停止&amp;quot; fi  </description>
    </item>
    
    <item>
      <title>运行spring boot打的jar包时，怎么指定配置文件</title>
      <link>http://www.cmyblog.top/posts/%E8%BF%90%E8%A1%8Cspringboot%E6%9E%84%E5%BB%BA%E7%9A%84jar%E6%97%B6%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 31 Jul 2019 17:45:06 +0800</pubDate>
      
      <guid>http://www.cmyblog.top/posts/%E8%BF%90%E8%A1%8Cspringboot%E6%9E%84%E5%BB%BA%E7%9A%84jar%E6%97%B6%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>运行spring boot打的jar包时，怎么指定配置文件
 在pom.xml文件中，排除要单独指定的配置文件  &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src\main\resources&amp;lt;/directory&amp;gt; &amp;lt;!--配置文件路径--&amp;gt; &amp;lt;excludes&amp;gt; &amp;lt;exclude&amp;gt;logback-spring.xml&amp;lt;/exclude&amp;gt; &amp;lt;!--要排除的配置文件名--&amp;gt; &amp;lt;exclude&amp;gt;application.yml&amp;lt;/exclude&amp;gt; &amp;lt;exclude&amp;gt;application-pro.yml&amp;lt;/exclude&amp;gt; &amp;lt;/excludes&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt;   通过Maven打包后，执行jar包时，指定所需配置文件  java -jar &amp;lt;jar包名&amp;gt; --spring.config.location=/home/cmy/test/ --logging.config=logback-spring.xml &amp;amp;   进阶，配合nohup命令，实现无控制台日志输出的后台运行jar包  nohup java -jar &amp;lt;jar包名&amp;gt; --spring.config.location=/home/cmy/test/ --logging.config=logback-spring.xml &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&amp;amp;   其中，如下命令实现了nohup命令无控制台日志输出功能
nohup &amp;lt;...&amp;gt; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&amp;amp;   </description>
    </item>
    
    <item>
      <title>Spring Boot通过Maven打jar包时，怎么引入本地jar包</title>
      <link>http://www.cmyblog.top/posts/springboot%E4%B8%8Bmaven%E6%89%93jar%E5%8C%85%E6%97%B6%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0jar/</link>
      <pubDate>Wed, 31 Jul 2019 17:26:31 +0800</pubDate>
      
      <guid>http://www.cmyblog.top/posts/springboot%E4%B8%8Bmaven%E6%89%93jar%E5%8C%85%E6%97%B6%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0jar/</guid>
      <description>spring boot通过Maven打jar包时，怎么引入本地jar包
 pom.xml文件中，配置本地jar包路径和在build标签下增加配置
 如下代码所示,
 引入本地jar包  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.aaa&amp;lt;/groupId&amp;gt; &amp;lt;!--无所谓，随便写--&amp;gt; &amp;lt;artifactId&amp;gt;bbb&amp;lt;/artifactId&amp;gt; &amp;lt;!--无所谓，随便写,作为项目jar中的外部jar包名字--&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;!--无所谓，随便写--&amp;gt; &amp;lt;scope&amp;gt;system&amp;lt;/scope&amp;gt; &amp;lt;systemPath&amp;gt;${project.basedir}/lib/ojdbc6.jar&amp;lt;/systemPath&amp;gt; &amp;lt;!--本地jar路径--&amp;gt; &amp;lt;/dependency&amp;gt;   修改build标签配置  &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;includeSystemScope&amp;gt;true&amp;lt;/includeSystemScope&amp;gt; &amp;lt;!--增加此配置--&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;   </description>
    </item>
    
    <item>
      <title>@VALUE注解对0开头数字的解析</title>
      <link>http://www.cmyblog.top/posts/value%E6%B3%A8%E8%A7%A3%E5%AF%B90%E5%BC%80%E5%A4%B4%E6%95%B0%E5%AD%97%E7%9A%84%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 17 Jul 2019 22:44:20 +0800</pubDate>
      
      <guid>http://www.cmyblog.top/posts/value%E6%B3%A8%E8%A7%A3%E5%AF%B90%E5%BC%80%E5%A4%B4%E6%95%B0%E5%AD%97%E7%9A%84%E8%A7%A3%E6%9E%90/</guid>
      <description>Spring的@VALUE注解对于properties和yml格式的配置文件，进行解析时，对于0开头的值，会进行解析操作
　对于非0开头的值，会按照正常类型进行解析
　对于0开头的值，对安装对应进制进行解析(即，安装数字转型进行处理)
　为了解决这一问题，可以用&amp;quot;&amp;quot;将值引起来，@VALUE注解就会按照字符串的形式进行解析</description>
    </item>
    
    <item>
      <title>Idea中Maven无法显示依赖</title>
      <link>http://www.cmyblog.top/posts/idea%E4%B8%ADmaven%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E4%BE%9D%E8%B5%96/</link>
      <pubDate>Wed, 10 Jul 2019 21:45:41 +0800</pubDate>
      
      <guid>http://www.cmyblog.top/posts/idea%E4%B8%ADmaven%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E4%BE%9D%E8%B5%96/</guid>
      <description>Idea有时会出现Maven的依赖无法显示情况，即在右边栏Maven工具中,Dependencies一栏中，没有正确的依赖显示，如

　考虑了网上的诸多解决方案，均没有解决问题，后来经过同事帮助，解决了问题，具体解决思路步骤如下：
   同事通过执行mvn -version命令，输出正常Maven信息，排除本地Maven工具错误的可能 接下来，执行&amp;rsquo;mvn clean&amp;rsquo;和&amp;rsquo;mvn -Dmaven.test.skip=true install&amp;rsquo;命令，分别清除编译的class文件并跳过测试进行安装,发现没有输出报错信息，并正常安装，此时可以证明，依赖已经正常引入 接下来，怀疑是Idea缓存的锅，进行Idea的缓存清除操作并重启,如   
　重启后，Idea里的Maven工具已正常显示依赖项，问题解决，特此记录。</description>
    </item>
    
    <item>
      <title>文件路径分隔符跨平台问题</title>
      <link>http://www.cmyblog.top/posts/%E9%9A%8F%E7%AC%94/</link>
      <pubDate>Tue, 09 Jul 2019 11:13:42 +0800</pubDate>
      
      <guid>http://www.cmyblog.top/posts/%E9%9A%8F%E7%AC%94/</guid>
      <description>　考虑到不同平台下，文件路径分隔符不同，如Windows下为&amp;rsquo;\&amp;rsquo;,Linux下为&amp;rsquo;/&amp;lsquo;，项目中如果不考虑分隔符的多平台一致，经常会造成上线问题，报错诸如：&amp;rsquo;no such file or directory&amp;lsquo;
　此时，可以使用File的静态常量separator，如，
String fileHome = &amp;quot;&amp;quot;; String fileName = &amp;quot;&amp;quot;; File file = new File(fileHome + File.separator + fileName);  </description>
    </item>
    
  </channel>
</rss>